{"version":3,"sources":["CountText.js","templates/LengthContainer.js","templates/ButtonComponent.js","templates/TypeCountContainer.js","templates/TextContainer.js","templates/SettingContainer.js","App.js","reportWebVitals.js","index.js"],"names":["CountText","content","max_length","symbolList","include_symbol","include_enter","include_space","each_counts","Object","assign","dState","cur_length","cnt_symbol","cnt_space","cnt_enter","safe_content","overflow_content","Helper","i","store","addChar","includes","symbol","charCodeAt","enter","push","space","char","length","LengthComponent","props","additionalcls","title","value","className","LengthContainer","id","limit","ToggleBtn","is_toggled","onClick","func","CheckboxBtn","is_checked","PopMsgBtn","btn_style","icon_cls_name","msg","TypeCountContainer","include_list","map","item","state","FakeContent","ref","refs","s","idx","TextContainer","React","useState","scrollTick","setScrollTick","ref_fake_content","useRef","safe","overflow","onInput","input_func","onScroll","event","newOffset","target","scrollTop","window","requestAnimationFrame","current","all","placeholder","DropSettingComponent","hide","setHide","display_icon","more_setting","InputComponent","input_type","setfunc","cur_val","reset_val","ref_input","EditArea","type","defaultValue","EditButtonGroup","handleChange","handleReset","handleCancel","console","log","SettingContainer","theme","operation","App","setContent","setCurLength","setEachCounts","setLimit","symbol_list","setsymbol_list","setIncludeSymbol","setIncludeEnter","setIncludeSpace","theme_is_light","setTheme","RecountText","cur_content","cur_limit","cur_symbol_list","cur_include_list","newCounts","newLength","newSafe","newOverflow","handleSwitch","val","setVal","new_val","forEach","style","project_title","preventDefault","stopPropagation","nativeEvent","stopImmediatePropagation","navigator","clipboard","writeText","then","alert","test","new_limit","Math","min","max","parseInt","input_content","confirm","new_symbol_list","substring","author_info","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90bfe4b1.chunk.js","sourcesContent":["import {default as dState} from './AppDefaultSetting.json';\r\n\r\nfunction CountText(content, max_length, symbolList,\r\ninclude_symbol, include_enter, include_space){\r\n  \r\n  const each_counts = Object.assign({}, dState.each_counts);\r\n  let cur_length = 0;\r\n  const cnt_symbol = include_symbol ? 1: 0;\r\n  const cnt_space = include_space ? 1: 0;\r\n  const cnt_enter = include_enter ? 1: 0;\r\n\r\n  // record from where is overflow\r\n  // and add <br> for newline or \"_\" for spaceholder if necessary\r\n  const safe_content = [\"\"];\r\n  const overflow_content = [\"\"];\r\n\r\n  function Helper(i, store){\r\n    let addChar = content[i];\r\n    if (symbolList.includes(content[i])){\r\n      each_counts.symbol ++;\r\n      cur_length += cnt_symbol;\r\n    }\r\n    else {\r\n      switch (content.charCodeAt(i)){\r\n        case 10: // enter\r\n          each_counts.enter ++;\r\n          cur_length += cnt_enter;\r\n          store.push(<br/>);\r\n          store.push(\"\");\r\n          addChar = \"\";\r\n          break;\r\n        case 32:\r\n          each_counts.space ++;\r\n          cur_length += cnt_space;\r\n          addChar = \"_\";\r\n          break;\r\n        default:\r\n          each_counts.char ++; \r\n          cur_length ++;\r\n        }\r\n      }\r\n    store[store.length - 1] += addChar;\r\n  }\r\n\r\n  let i = 0;\r\n  while (i < content.length && cur_length < max_length){\r\n    Helper(i, safe_content);\r\n    i ++;\r\n  }\r\n  while (i < content.length){\r\n    Helper(i, overflow_content);\r\n    i ++;\r\n  }\r\n\r\n  return [each_counts, cur_length, safe_content, overflow_content];\r\n}\r\n\r\n\r\nexport default CountText;","import './LengthContainer.css';\r\n\r\nfunction LengthContainer(props){\r\n  // props: cur_length, limit\r\n  // cur_length, limit: int of current length/ limit length of texts\r\n  return(\r\n    <div id=\"length_container\"\r\n      className=\"container\"\r\n    >\r\n      <LengthComponent\r\n        title=\"current\"\r\n        value={props.cur_length}\r\n      />\r\n      <LengthComponent\r\n        title=\"remain\"\r\n        value={props.limit - props.cur_length}\r\n      />\r\n      <LengthComponent\r\n        title=\"limit\"\r\n        value={props.limit}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction LengthComponent(props){\r\n  // props: title, value\r\n  // title: string as label, value: int to display\r\n  let additionalcls = \"\";\r\n  let title = props.title;\r\n  if (props.value < 0){\r\n    title = \"overflow\";\r\n    additionalcls = \"overflow\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"length\">\r\n      <header className=\"length_title\">\r\n        {title}\r\n      </header>\r\n      <div className={`length_val ${additionalcls}`}>\r\n        {props.value}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LengthContainer;","import './ButtonComponent.css'\r\n\r\nfunction ToggleBtn(props){\r\n  // props: func, content, is_toggled\r\n  // func: function that to display when cliking it\r\n  // content: string as the button description\r\n  // is_toggled: bool indicates the status of the button\r\n  return (\r\n    <div className={`toggle_btn-${props.is_toggled}`}\r\n      onClick={props.func}\r\n    >\r\n      <span className={`slider-${props.is_toggled} circle btn`}/>\r\n      <span className={`toggle_content`}>\r\n        {props.content}\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\nfunction CheckboxBtn(props){\r\n  // props: is_checked, content, func\r\n  // content: string as the button description\r\n  // func: function that to display when cliking it\r\n  // is_checked: bool indicates the status of the button\r\n  return (\r\n    <div className={`checkbox_btn btn`}\r\n      onClick={props.func}\r\n    >\r\n      <i className={`bi bi-${props.is_checked ? \"check-circle-fill checked\": \"circle\"}`}/>\r\n      {props.content}\r\n    </div>\r\n  );\r\n}\r\nfunction PopMsgBtn(props){\r\n  // props: func, icon_cls_name, msg, btn_style\r\n  // func: function that to display when cliking it\r\n  // icon_cls_name: string of bootstrap icon\r\n  // msg: string as the button description\r\n  // btn_style: string of additional style of button\r\n  return (\r\n    <div className={`btn msg_btn ${props.btn_style || \"\"}`}\r\n      onClick={props.func}\r\n    >\r\n      <i className={props.icon_cls_name}/>\r\n      <div className=\"msg_container\">\r\n        <p className=\"msg\">\r\n          {props.msg}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport {CheckboxBtn, ToggleBtn, PopMsgBtn};","import {CheckboxBtn} from './ButtonComponent';\r\n\r\nfunction TypeCountContainer(props){\r\n  // props: each_counts, include_list\r\n  // each_counts: object of {string: int}\r\n  // include_list: array of {title: string, state: React.useState array}\r\n\r\n  return (\r\n    <div id=\"count_container\"\r\n      className=\"container\"\r\n    >\r\n      <span className=\"count\">\r\n        {`char : ${props.each_counts.char}`}\r\n      </span>\r\n      {props.include_list.map((item, i)=>\r\n        <span className=\"count\"\r\n          key={`include-${i}`}\r\n        >\r\n          <CheckboxBtn\r\n            is_checked={item.state[0]}\r\n            func={item.state[1]}\r\n            content={`${item.title}: ${props.each_counts[item.title]}`}\r\n          />\r\n        </span>\r\n      )}\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default TypeCountContainer;","import React from 'react';\r\nimport './TextContainer.css'\r\n\r\nfunction TextContainer(props){\r\n  // props: content, input_func\r\n  // content: object, {all: string, safe: [string], overflow: [string]}\r\n  // input_func: function that handle inputs\r\n\r\n  // set scroll behavior\r\n  const [scrollTick, setScrollTick] = React.useState(false);\r\n  const ref_fake_content = React.useRef(null);\r\n  const syncScroll = (event)=>{\r\n    // get offsetY of real text, and make fake text scrolls\r\n    // idea is from https://www.html5rocks.com/en/tutorials/speed/animations/\r\n    const newOffset = event.target.scrollTop;\r\n    if (!scrollTick) {\r\n      window.requestAnimationFrame(()=>{ \r\n        setScrollTick(false);\r\n        // avoid fake content is unmounted yet\r\n        if (ref_fake_content.current){\r\n          ref_fake_content.current.scrollTop = newOffset;\r\n        }\r\n      });\r\n      setScrollTick(true);\r\n    }\r\n  }\r\n  return (\r\n    <div id=\"text_container\"\r\n      className=\"container\"\r\n    >\r\n      <FakeContent\r\n        safe_content={props.content.safe}\r\n        overflow_content={props.content.overflow}\r\n        refs={ref_fake_content}\r\n      />\r\n      <textarea\r\n        id=\"true_text\" \r\n        className=\"text\"\r\n        onInput={props.input_func}\r\n        onScroll={syncScroll}\r\n        value={props.content.all}\r\n        placeholder=\"start type something here :D\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FakeContent(props){\r\n  // props: refs, safe_content, overflow_content\r\n  // see above\r\n  return (\r\n    <div id=\"fake_text\"\r\n      className=\"text\"\r\n      ref={props.refs}\r\n    >\r\n      <p>                \r\n        {props.safe_content.map((s, idx) => \r\n          <span key={`${idx}_safe_content`}>\r\n            {s}\r\n          </span>\r\n        )}\r\n        {props.overflow_content.map((s, idx) => \r\n          <span className=\"overflow_content\" \r\n            key={`${idx}_overflow_content`}\r\n          >\r\n            {s}\r\n          </span>\r\n        )}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextContainer;","import React, { useState } from 'react';\r\nimport {PopMsgBtn, ToggleBtn} from './ButtonComponent';\r\nimport {default as display_icon} from '../AppIconSetting.json';  \r\nimport './SettingContainer.css';\r\n\r\nfunction SettingContainer(props){\r\n  // props: operation, theme, more_setting\r\n  // operation: array of {title: string, func: function to display, btn_style: string}\r\n  // theme: {title: string, state: React.useState array}\r\n  // more_setting: \r\n  // {state: React useState object, title: string, defaullt_val: any, input_type: string}\r\n\r\n  return (\r\n    <div id=\"setting_container\"\r\n      className=\"container\"\r\n    >\r\n      <ToggleBtn\r\n        is_toggled={props.theme.state[0]}\r\n        func={props.theme.state[1]}\r\n        content={<i className={display_icon[props.theme.title]}/>}\r\n      />\r\n      <DropSettingComponent\r\n        more_setting={props.more_setting}\r\n      />\r\n      {props.operation.map((item, i)=>\r\n        <PopMsgBtn\r\n          func={item.func}\r\n          icon_cls_name={display_icon[item.title]}\r\n          msg={item.title}\r\n          btn_style={`circle ${item.btn_style}`}\r\n          key={`setting_operation-${i}`}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DropSettingComponent(props){\r\n  // props: more_setting: array of object, inherit from setting container\r\n\r\n  const [hide, setHide] = useState(true);\r\n  const handleDisplay = () => {\r\n    setHide(! hide);\r\n  }\r\n  /*\r\n  const handleChange = ()=> {\r\n    item_list.forEach(item => {\r\n      item.state[1](item.ref_input.current.value);\r\n    });\r\n    handleDisplay();\r\n  }\r\n  const handleReset = () => {\r\n    item_list.forEach(item => {\r\n      item.ref_input.current.value = item.default_val;\r\n    });\r\n  }\r\n  */\r\n  return (\r\n    <div className=\"drop_setting_container\">\r\n      <PopMsgBtn\r\n        func={handleDisplay}\r\n        icon_cls_name={display_icon[\"edit\"]}\r\n        msg=\"more settings\"\r\n        btn_style=\"circle primary\"\r\n      />\r\n      <div className={`drop_content-${hide ? \"hide\": \"display\"}`}>\r\n        {props.more_setting.map((item, i)=>\r\n          <InputComponent\r\n            title={item.title}\r\n            input_type={item.input_type}\r\n            setfunc={item.state[1]}\r\n            cur_val={item.state[0]}\r\n            reset_val={item.reset_val}\r\n            ref_input={item.ref_input}\r\n            key={`more_setting-${i}`}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nfunction InputComponent(props){\r\n  // props: title, setfunc, input_type, cur_val, reset_val\r\n  // title, input_type, cur_val, reset_val: string\r\n  // setfunc: function that handle change\r\n\r\n  const ref_input = React.useRef(null);\r\n  const handleChange = ()=> {\r\n    props.setfunc(ref_input.current.value);\r\n  }\r\n  const handleReset = () => {\r\n    ref_input.current.value = props.reset_val;\r\n  }\r\n  const handleCancel = () => {\r\n    console.log(props.cur_val);\r\n    ref_input.current.value = props.cur_val;\r\n  }\r\n  let EditArea;\r\n  if (! props.input_type){\r\n    EditArea = (\r\n      <textarea className=\"edit_input\"\r\n        defaultValue={props.cur_val}\r\n        ref={ref_input}\r\n      />\r\n    );\r\n  }\r\n  else {\r\n    EditArea = (\r\n      <input className=\"edit_input\"\r\n        type={props.input_type}\r\n        defaultValue={props.cur_val}\r\n        ref={ref_input}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n    <label>{props.title}</label>\r\n    {EditArea}\r\n    <EditButtonGroup\r\n      handleChange={handleChange}\r\n      handleReset={handleReset}\r\n      handleCancel={handleCancel}\r\n    />\r\n    </>\r\n  );\r\n}\r\nfunction EditButtonGroup(props){\r\n  // props:handleChange, handleCancel, handleReset\r\n  // functions inherit from drop setting component\r\n  return (\r\n    <div className=\"container edit_btn_group\">\r\n      <PopMsgBtn\r\n        func={props.handleReset}\r\n        icon_cls_name={display_icon[\"reset\"]}\r\n        msg=\"reset\"\r\n      />\r\n      <PopMsgBtn\r\n        func={props.handleCancel}\r\n        icon_cls_name={display_icon[\"cancel\"]}\r\n        msg=\"cancel\"\r\n      />\r\n      <PopMsgBtn\r\n        func={props.handleChange}\r\n        icon_cls_name={display_icon[\"save\"]}\r\n        msg=\"save\"\r\n        btn_style=\"primary\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingContainer;","import React from 'react';\nimport CountText from './CountText';\nimport LengthContainer from './templates/LengthContainer';\nimport TypeCountContainer from './templates/TypeCountContainer';\nimport TextContainer from './templates/TextContainer';\nimport SettingContainer from './templates/SettingContainer';\n\nimport {default as dState} from './AppDefaultSetting.json';\nimport './App.css';\n\n\nfunction App() {\n  // text settings\n  const [content, setContent] = React.useState(dState.content);\n  const [cur_length, setCurLength] = React.useState(dState.cur_length);\n  const [each_counts, setEachCounts] = React.useState(dState.each_counts);\n  \n  // editor settings\n  const [limit, setLimit] = React.useState(dState.limit);\n  const [symbol_list, setsymbol_list] = React.useState(dState.symbol_list);\n  const [include_symbol, setIncludeSymbol] = React.useState(dState.include_symbol);\n  const [include_enter, setIncludeEnter] = React.useState(dState.include_enter);\n  const [include_space, setIncludeSpace] = React.useState(dState.include_space);\n  \n  // color theme settings \n  const [theme_is_light, setTheme] = React.useState(true);\n\n  const RecountText = (cur_content, cur_limit, cur_symbol_list, cur_include_list) => {\n    // because state update is async, the include setting is input manually\n    const [newCounts, newLength, newSafe, newOverflow] = \n      CountText(cur_content, cur_limit, cur_symbol_list, ...cur_include_list);\n    setEachCounts(newCounts);\n    setCurLength(newLength);\n    setContent({\n      \"all\": cur_content, \n      \"safe\": newSafe, \n      \"overflow\": newOverflow\n    });\n  };\n  const handleTextInput = (event)=>{\n    RecountText(event.target.value, limit, symbol_list, [include_symbol, include_enter, include_space]);\n  };\n  const handleSwitch = (val, setVal) => {\n    // return a function that switch the state to true/false\n    // and update count if necessary\n    return()=>{\n      const new_val = !val;\n      setVal(new_val);\n      let includes = [include_symbol, include_enter, include_space];\n      [setIncludeSymbol, setIncludeEnter, setIncludeSpace].forEach((func, i) => {\n        if (func === setVal){\n          includes[i] = new_val;\n          RecountText(content.all, limit, symbol_list, includes);\n        }\n      });\n    }\n  }\n  const handleLimit = (val)=>{\n    if (/[0123456789]+/.test(val)){\n      const new_limit = Math.min(Math.max(parseInt(val), 1), 1000);\n      if (new_limit !== limit){\n        setLimit(new_limit);\n        RecountText(content.all, new_limit, symbol_list, [include_symbol, include_enter, include_space]);\n      }\n    }\n  }\n  const handleSymbolList = (input_content) => {\n    if (input_content === \"\"){\n      const valid = window.confirm(\"are you sure no symbol ?\");\n      if (! valid){\n        return;\n      }\n    }\n    const new_symbol_list = input_content.substring(0, 50);\n    if (new_symbol_list !== symbol_list){\n      setsymbol_list(new_symbol_list);\n      RecountText(content.all, limit, new_symbol_list, [include_symbol, include_enter, include_space]);\n    }\n  }\n  const ClearContent = () => {\n    RecountText(\"\", limit, symbol_list, [include_symbol, include_enter, include_space]);\n  }\n  const CopyContent = (event) =>{\n    event.preventDefault()\n    event.stopPropagation();\n    event.nativeEvent.stopImmediatePropagation();\n    const promise = navigator.clipboard.writeText(content.all);\n    promise.then(()=>{\n      window.alert(\"copy successfully\");\n    }, ()=>{\n      window.alert(\"copy failed :( your browser seems not support this function\");\n    });\n  }\n  return (\n    <div className=\"App\" style={dState[theme_is_light ? \"lighttheme\": \"darktheme\"]}>\n      <header id=\"App_header\"\n        className=\"container\"\n      >\n        <h1>{dState.project_title}</h1>\n        <SettingContainer\n          operation={[\n            {title: \"copy\", func: CopyContent},\n            {title: \"clear\", func: ClearContent, btn_style: \"danger\"}\n          ]}\n          more_setting={[\n            {state: [limit, handleLimit], title: \"limit length:\", input_type: \"number\", reset_val: dState.limit},\n            {state: [symbol_list, handleSymbolList], title: \"symbol list:\", reset_val: dState.symbol_list}\n          ]}\n          theme={{\n            state: [theme_is_light, handleSwitch(theme_is_light, setTheme)], \n            title: theme_is_light ? \"light mode\": \"dark mode\"\n          }}\n        />\n        <LengthContainer\n          cur_length={cur_length}\n          limit={limit}\n        />\n        <TypeCountContainer\n          each_counts={each_counts}\n          include_list={[\n            {state: [include_space, handleSwitch(include_space, setIncludeSpace)], title: \"space\"},\n            {state: [include_enter, handleSwitch(include_enter, setIncludeEnter)], title: \"enter\"},\n            {state: [include_symbol, handleSwitch(include_symbol, setIncludeSymbol)], title: \"symbol\"}\n          ]}\n        />\n      </header>\n      <TextContainer\n        content={content}\n        input_func={handleTextInput}\n      />\n      <footer>\n        {dState.author_info}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}