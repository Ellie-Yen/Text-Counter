{"version":3,"sources":["CountText.js","templates/LengthComponent.js","templates/TextContainer.js","templates/ButtonComponent.js","App.js","reportWebVitals.js","index.js"],"names":["CountText","content","max_length","symbolList","include_symbol","include_enter","include_space","each_counts","Object","assign","dState","cur_length","cnt_symbol","cnt_space","cnt_enter","safe_content","overflow_content","Helper","i","store","addChar","includes","symbol","charCodeAt","enter","push","space","char","length","LengthComponent","title","value","additionalcls","className","TextContainer","setfunc","font_color","React","useState","scrollTick","setScrollTick","refFakeText","useRef","colorset","id","ref","style","safe","map","s","idx","overflow","onInput","onScroll","event","newOffset","target","scrollTop","window","requestAnimationFrame","current","all","Buttons","CheckBoxBtn","name","val","DetailBtn","func","onClick","EditBtn","default_val","editMode","setMode","refInput","handleChange","res","label","replace","editArea","defaultValue","type","PopMsgBtn","App","setContent","setCurLength","setEachCounts","restrict","setRestrict","setSymbolList","setIncludeSymbol","setIncludeEnter","setIncludeSpace","lighttheme","theme","setTheme","RecountText","newcontent","newCounts","newLength","newSafe","newOverflow","project_title","project_description","test","Math","min","max","parseInt","color","keys","x","confirm","substring","darktheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4692dbd.chunk.js","sourcesContent":["import {default as dState} from './AppDefaultSetting.json';\r\n\r\nfunction CountText(content, max_length, symbolList,\r\ninclude_symbol, include_enter, include_space){\r\n\r\n    const each_counts = Object.assign({}, dState.each_counts);\r\n    let cur_length = 0;\r\n    const cnt_symbol = include_symbol ? 1: 0;\r\n    const cnt_space = include_space ? 1: 0;\r\n    const cnt_enter = include_enter ? 1: 0;\r\n\r\n    // record from where is overflow\r\n    // and add <br> for newline or \"_\" for spaceholder if necessary\r\n    const safe_content = [\"\"];\r\n    const overflow_content = [\"\"];\r\n\r\n    function Helper(i, store){\r\n        let addChar = content[i];\r\n        if (symbolList.includes(content[i])){\r\n            each_counts.symbol ++;\r\n            cur_length += cnt_symbol;\r\n        }\r\n        else {\r\n            switch (content.charCodeAt(i)){\r\n                case 10: // enter\r\n                    each_counts.enter ++;\r\n                    cur_length += cnt_enter;\r\n                    store.push(<br/>);\r\n                    store.push(\"\");\r\n                    addChar = \"\";\r\n                    break;\r\n                case 32:\r\n                    each_counts.space ++;\r\n                    cur_length += cnt_space;\r\n                    addChar = \"_\";\r\n                    break;\r\n                default:\r\n                    each_counts.char ++; \r\n                    cur_length ++;\r\n            }\r\n        }\r\n        store[store.length - 1] += addChar;\r\n    }\r\n\r\n    let i = 0;\r\n    while (i < content.length && cur_length < max_length){\r\n        Helper(i, safe_content);\r\n        i ++;\r\n    }\r\n    while (i < content.length){\r\n        Helper(i, overflow_content);\r\n        i ++;\r\n    }\r\n\r\n    return [each_counts, cur_length, safe_content, overflow_content];\r\n}\r\n\r\n\r\nexport default CountText;","import './LengthComponent.css';\r\n\r\nfunction LengthComponent(title, value){\r\n    let additionalcls = \"\";\r\n    if (value < 0){\r\n        title = \"overflow\";\r\n        additionalcls = \"overflow\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"length\">\r\n          <header className=\"length_title\">\r\n            {title}\r\n          </header>\r\n          <div className={`length_val ${additionalcls}`}>\r\n            {value}\r\n          </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LengthComponent;","import React from 'react';\r\nimport './TextContainer.css'\r\n\r\nfunction TextContainer(content, setfunc, font_color){\r\n    // set scroll behavior\r\n    const [scrollTick, setScrollTick] = React.useState(false);\r\n    const refFakeText = React.useRef(null);\r\n    const syncScroll = (event)=>{\r\n        // get offsetY of real text, and make fake text scrolls\r\n        // idea is from https://www.html5rocks.com/en/tutorials/speed/animations/\r\n        const newOffset = event.target.scrollTop;\r\n        if (!scrollTick) {\r\n            window.requestAnimationFrame(()=>{ \r\n                setScrollTick(false);\r\n                refFakeText.current.scrollTop = newOffset;\r\n            });\r\n            setScrollTick(true);\r\n          }\r\n    }\r\n    \r\n    const colorset = {\"color\": font_color, \"borderColor\": font_color};\r\n\r\n    return (\r\n        <div id=\"text_container\"\r\n            className=\"container\"\r\n        >\r\n            <div id=\"fake_text\"\r\n                className=\"text\"\r\n                ref={refFakeText}\r\n                style={colorset}\r\n            >\r\n                <p>                \r\n                    {content.safe.map((s, idx) => \r\n                        <span key={`${idx}_safe_content`}>\r\n                            {s}\r\n                        </span>\r\n                    )}\r\n                    {content.overflow.map((s, idx) => \r\n                        <span className=\"overflow_content\" \r\n                            key={`${idx}_overflow_content`}\r\n                        >\r\n                            {s}\r\n                        </span>\r\n                    )}\r\n                </p>\r\n            </div>\r\n            <textarea\r\n                id=\"true_text\" \r\n                className=\"text\"\r\n                onInput={setfunc}\r\n                onScroll={syncScroll}\r\n                value={content.all}\r\n                style={colorset}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextContainer;","import React, { useState } from 'react';\r\nimport './ButtonComponent.css'\r\n\r\nconst Buttons = {\r\n    \"default setting\": \"bi bi-arrow-counterclockwise\",\r\n    \"refresh\": \"bi bi-arrow-repeat\",\r\n    \"clear\": \"bi bi-trash\",\r\n    \"symbol\": \"bi bi-asterisk\",\r\n    \"space\": \"bi bi-app\",\r\n    \"enter\": \"bi bi-arrow-return-left\",\r\n    \"edit\": \"bi bi-pencil-square\",\r\n    \"save\": \"bi bi-check-circle\",\r\n    \"cancel\": \"bi bi-x-circle\",\r\n    \"light\": \"bi bi-sun-fill\",\r\n    \"dark\": \"bi bi-moon-fill\"\r\n};\r\n\r\nfunction CheckBoxBtn(name, val, setfunc){\r\n    const handleClick = ()=> {\r\n        setfunc(!val);\r\n    }\r\n    return (\r\n        DetailBtn(name, handleClick, `checkboxbtn checked_${val}`)\r\n    );\r\n}\r\nfunction DetailBtn(name, func, additionalcls=\"\"){\r\n    return (\r\n        <div className={`btn detailbtn ${additionalcls}`}\r\n            onClick={func}\r\n        >\r\n            <i\r\n                className={Buttons[name]}\r\n                onClick={func}\r\n            />\r\n            <small>{name}</small>\r\n        </div>\r\n    );\r\n}\r\nfunction EditBtn(name, val, default_val, setfunc){\r\n    const [editMode, setMode] = useState(false);\r\n    const refInput = React.useRef(null);\r\n    const handleChange = ()=> {\r\n        if (editMode){\r\n            const res = refInput.current.value;\r\n            setfunc(res);\r\n        }\r\n        setMode(! editMode);\r\n    }\r\n    const handleReset = () => {\r\n        refInput.current.value = default_val;\r\n    }\r\n    const handleCancel = () => {\r\n        setMode(! editMode);\r\n    }\r\n    const label = name.replace(\"_\", \" \");\r\n    if (editMode){\r\n        let editArea = \r\n            <textarea id={name}\r\n                className=\"edit_input\"\r\n                defaultValue={val}\r\n                ref={refInput}\r\n            />\r\n        ;\r\n        if (typeof val === \"number\"){\r\n            editArea = \r\n                <input id={name}\r\n                    className=\"edit_input\"\r\n                    type=\"number\"\r\n                    defaultValue={val}\r\n                    ref={refInput}\r\n                />\r\n            ;\r\n        }\r\n        return (\r\n            <div className=\"edit_btn\">\r\n                <div className=\"label\">\r\n                    {label}\r\n                </div>\r\n                <div className=\"btn_container\">\r\n                    {PopMsgBtn(\"default setting\", handleReset)}\r\n                    {PopMsgBtn(\"save\", handleChange)}\r\n                    {PopMsgBtn(\"cancel\", handleCancel)}\r\n                </div>\r\n                {editArea}\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"btn edit_btn\"\r\n            onClick={handleChange}\r\n        >\r\n            <div className=\"label\">\r\n                {label}\r\n            </div>\r\n            <i className={Buttons[\"edit\"]}\r\n                onClick={handleChange}\r\n            />\r\n        </div>\r\n    );\r\n\r\n}\r\nfunction PopMsgBtn(name, func, additionalcls=\"\"){\r\n    // use for edit buttons\r\n    return (\r\n        <div className={`btn msg_btn ${additionalcls}`}\r\n            onClick={func}\r\n        >\r\n            <i className={Buttons[name]}\r\n                onClick={func}\r\n            />\r\n            <div className=\"msg\">\r\n                <p><small>{name}</small></p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {CheckBoxBtn, DetailBtn, EditBtn};","import React from 'react';\nimport {default as dState} from './AppDefaultSetting.json';\nimport CountText from './CountText';\nimport LengthComponent from './templates/LengthComponent';\nimport TextContainer from './templates/TextContainer';\nimport {DetailBtn, CheckBoxBtn, EditBtn} from './templates/ButtonComponent';\nimport './App.css';\n\n\nfunction App() {\n  // text settings\n  const [content, setContent] = React.useState(dState.content);\n  const [cur_length, setCurLength] = React.useState(dState.cur_length);\n  const [each_counts, setEachCounts] = React.useState(dState.each_counts);\n  \n  // editor settings\n  const [restrict, setRestrict] = React.useState(dState.restrict);\n  const [symbolList, setSymbolList] = React.useState(dState.symbolList);\n  const [include_symbol, setIncludeSymbol] = React.useState(dState.include_symbol);\n  const [include_enter, setIncludeEnter] = React.useState(dState.include_enter);\n  const [include_space, setIncludeSpace] = React.useState(dState.include_space);\n  \n  // color theme settings \n  const [theme, setTheme] = React.useState(dState.lighttheme);\n\n  const RecountText = (newcontent) => {\n    const [newCounts, newLength, newSafe, newOverflow] = \n      CountText(newcontent, restrict, symbolList, \n        include_symbol, include_enter, include_space);\n    setEachCounts(newCounts);\n    setCurLength(newLength);\n    setContent({\n      \"all\": newcontent, \n      \"safe\": newSafe, \n      \"overflow\": newOverflow\n    });\n  };\n  const handleTextInput = (event)=>{\n    RecountText(event.target.value);\n  };\n  const handleRestrict = (val)=>{\n    if (/[0123456789]+/.test(val)){\n      const res = Math.min(Math.max(parseInt(val), 1), 1000);\n      setRestrict(res);\n    }\n  }\n  const handleSymbolList = (s) => {\n    if (s === \"\"){\n      const valid = window.confirm(\"are you sure no symbol ?\");\n      if (! valid){\n        return;\n      }\n    }\n    setSymbolList(s.substring(0, 50));\n  }\n  const Refresh = () => {\n    RecountText(content.all);\n  }\n  const ClearContent = () => {\n    RecountText(\"\");\n  }\n  const SwitchColorTheme = () => {\n    if (theme === dState.lighttheme){\n      setTheme(dState.darktheme);\n    }\n    else {\n      setTheme(dState.lighttheme);\n    }\n  }\n  return (\n    <div className=\"App\" style={theme}>\n      <header id=\"App_header\"\n        className=\"container\"\n      >\n        <h1>{dState.project_title}</h1>\n        <p>{dState.project_description}</p>\n      </header>\n      <div id=\"length_container\"\n        className=\"container\"\n      >\n        {LengthComponent(\"current\", cur_length)}\n        {LengthComponent(\"remain\", restrict - cur_length)}\n        {LengthComponent(\n          EditBtn(\"restrict\", restrict, dState.restrict, handleRestrict), \n          restrict\n        )}\n      </div>\n      {TextContainer(content, handleTextInput, theme.color)}\n      <div id=\"count_container\"\n        className=\"container\"\n      >\n        {Object.keys(each_counts).map(x =>\n          <span\n            className=\"count\"\n            key={x}\n          >\n            {`${x} : ${each_counts[x]}`}\n          </span>\n        )}\n        {EditBtn(\"symbol list\", symbolList, dState.symbolList, handleSymbolList)}\n      </div>\n      <div id=\"setting_container\"\n        className=\"container\"\n      >\n        {CheckBoxBtn(\"space\", include_space, setIncludeSpace)}\n        {CheckBoxBtn(\"enter\", include_enter, setIncludeEnter)}\n        {CheckBoxBtn(\"symbol\", include_symbol, setIncludeSymbol)}\n        {DetailBtn(\n          theme === dState.darktheme ? \"dark\": \"light\", \n          SwitchColorTheme\n        )}\n        {DetailBtn(\"refresh\", Refresh, \"btn_primary\")}\n        {DetailBtn(\"clear\", ClearContent, \"btn_danger\")}\n      </div> \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}